#pragma config(Sensor, S1,     Fear_Light,     sensorLightInactive)
#pragma config(Sensor, S2,     Left_Light,     sensorLightActive)
#pragma config(Sensor, S3,     Right_Light,    sensorLightActive)
#pragma config(Sensor, S4,     Com,            sensorHighSpeed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define SAMPLES 100
#define BLACK 30
#define SCARY 75

int counter = 0;
task main () {
	eraseDisplay();
	int num;
	ubyte outgoing[3] = {1, 1, 1};
	ubyte ACK[1];
	nxtEnableHSPort();
	nxtHS_Mode = hsRawMode;
	nxtSetHSBaudRate(9600);
	wait1Msec(2000);

	nxtWriteRawHS(&outgoing[0],3,0);

	while(nxtGetAvailHSBytes()==0);
	nxtReadRawHS(&ACK[0],1);
	int leftLums, rightLums, fearLums;
	int leftLumenance, rightLumenance,fearLumenance;
	int i,j;
	int lSuccess, rSuccess,fSuccess;

	while(true)
	{
		lSuccess = 0;
		rSuccess = 0;
		fSuccess = 0;
		for(j = 0; j<4; j++)
		{
			leftLums = 0;
			rightLums = 0;
			fearLums = 0;
			for(i=0;i<SAMPLES;i++)
			{
				leftLums += SensorValue(Left_Light);
				rightLums += SensorValue(Right_Light);
				fearLums += SensorValue(Fear_Light);
			}
			leftLumenance = leftLums/SAMPLES;
			rightLumenance = rightLums/SAMPLES;
			fearLumenance = fearLums/SAMPLES;
			displayBigTextLine(0, "%d", leftLumenance );
			displayBigTextLine(2, "%d", rightLumenance);
			displayBigTextLine(4, "%d", fearLumenance );
			if(leftLumenance>=BLACK)
				lSuccess++;
			if(rightLumenance>=BLACK)
				rSuccess++;
			if(fearLumenance>=SCARY)
				fSuccess++;
		}
		if(lSuccess>=3){
			outgoing[0] = 2;
		//	displayBigTextLine(0, "1_True");
			} else{
			outgoing[0] = 1;
		//	displayBigTextLine(0, "1_False");
		}
		if(rSuccess>=3){
			outgoing[1] = 2;
		//	displayBigTextLine(3, "2_True");
			} else{
			outgoing[1] = 1;
		//	displayBigTextLine(3, "2_False");
		}
		if(fSuccess>=3){
			outgoing[2] = 2;
		//	displayBigTextLine(6, "3_True");
			} else{
			outgoing[2] = 1;
		//	displayBigTextLine(6, "3_False");
		}
		nxtWriteRawHS(&outgoing[0],3,0);
		while(nxtGetAvailHSBytes()==0);
		nxtReadRawHS(&ACK[0],1);
	}
}
